#!/bin/bash
#
# Mawd      upstart Startup script for the MawD Server
#
# chkconfig: - 85 15
# description: The MawD Server is an efficient interface to your GPU.
# processname: mawd
# config: /etc/sysconfig/mawd.conf
# pidfile: /var/run/mawd.pid
#
### BEGIN INIT INFO
# Provides: mawd
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Should-Start: distcache
# Short-Description: start and stop MawD Server
# Description: The MawD Server is an efficient interface to your GPU.
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/mawd.conf ]; then
        . /etc/sysconfig/mawd.conf
fi

# Start mawd in the C locale by default.
MAWD_LANG=${MAWD_LANG-"C"}

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

# Set MAWD=/usr/sbin/mawd.worker in /etc/sysconfig/mawd to use a server
# with the thread-based "worker" MPM; BE WARNED that some modules may not
# work correctly with a thread-based MPM; notably PHP will refuse to start.

# Path to the server binary, and short-form for messages.
mawd=${MAWD-/usr/bin/mawd $MAWS_ARGS}
prog=mawd
pidfile=${PIDFILE-/var/run/mawd.pid}
lockfile=${LOCKFILE-/var/lock/subsys/mawd}
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}

start() {
        echo -n $"Starting $prog: "
        LANG=$MAWD_LANG daemon --pidfile=${pidfile} $mawd $OPTIONS
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}
        return $RETVAL
}

# When stopping mawd, a delay (of default 10 second) is required
# before SIGKILLing the mawd parent; this gives enough time for the
# mawd parent to SIGKILL any errant children.
stop() {
		fusermount -u $MAWD_BASE
        status -p ${pidfile} $mawd > /dev/null
        if [[ $? = 0 ]]; then
                echo -n $"Stopping $prog: "
                killproc -p ${pidfile} -d ${STOP_TIMEOUT} $mawd
        else
                echo -n $"Stopping $prog: "
                success
        fi
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

reload() {
    echo -n $"Reloading $prog: "
    if ! LANG=$MAWD_LANG $mawd $OPTIONS -t >&/dev/null; then
        RETVAL=6
        echo $"not reloading due to configuration syntax error"
        failure $"not reloading $mawd due to configuration syntax error"
    else
        # Force LSB behaviour from killproc
        LSB=1 killproc -p ${pidfile} $mawd -HUP
        RETVAL=$?
        if [ $RETVAL -eq 7 ]; then
            failure $"mawd shutdown"
        fi
    fi
    echo
}

# See how we were called.
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status -p ${pidfile} $mawd
        RETVAL=$?
        ;;
  restart)
        stop
        start
        ;;
  condrestart|try-restart)
        if status -p ${pidfile} $mawd >&/dev/null; then
                stop
                start
        fi
        ;;
  force-reload|reload)
        reload
        ;;
  graceful|help|configtest|fullstatus)

        RETVAL=$?
        ;;
  *)
        echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload|status|fullstatus|graceful|help|configtest}"
        RETVAL=2
esac

exit $RETVAL

