#!/usr/bin/mawsh
// John Boero
// JSON - OpenCL Object Notation
// Example of parallel JSON rendering based on CLON examples.
#include <mawsh.cl>

// Define our schema via struct (required).
typedef struct
{
	char 	first[32], last[32];
	short	age;
	char 	address[64];
} person;

// In OpenCL 1.2, program-level variables require constant address space.
// In OpenCL 2.0+ they can be constant or global.
constant person john = {.first="John", .last="Boero", 25, "john@nope.tech"};
constant char template[] = "{\n\
    \"first\": \"                     \",\n\
    \"last\": \"                     \",\n\
    \"age\": \"                     \",\n\
    \"address\": \"                     \",\n\
},";

// Use a typedef to structure lengths.
typedef char peoplejson[3][sizeof(template)];

// Define an array inline.
constant person localPeople[] = {
{"Jimmy", "Whiplash", 23, "jimmy@nope.tech"},
{"Cindi", "Johnson", 36, "cindi@nope.tech"},
{"高橋", "鈴木", 29, "takahashi@nope.tech"}
};

// Cheater to get length of template... 156
// By commenting "kernel" this won't run.
/*kernel*/ void printlen(global mawproc *p)
{
    printmc(&p->out, template);
    printmi(&p->out, sizeof(template));
}

// Parallel print helper
void pprint(constant char *src, global char *dst)
{
    if (src[G0] == '\0')
        dst[G0] = ' ';
    else
        dst[G0] = src[G0];
}

kernel void pprint_3x128(global peoplejson *json)
{
    // Direct copy of template.
    *json[G0][G1] = template[G1];

    // 0x10 (16) first
    pprint(localPeople[G1].first, json[G1][0x10]);

    // 0x35 last
    pprint(localPeople[G1].last, json[G1][0x35]);

    // 0x59 age
    // 0x81 address
}